#include <Eigen/Dense>

// This file has been generated by generate7LinkModelSymengine.py.
// Edit at your own risk.

class BreedingBlanketRobot
{
public:
	BreedingBlanketRobot();
	~BreedingBlanketRobot();
	int N;
	Eigen::Matrix<double, 7, 1> gravity (const Eigen::Matrix<double, 7, 1> & q);

	Eigen::Matrix<double, 6, 7> jacobian (const Eigen::Matrix<double, 7, 1> & q);

	Eigen::Matrix<double, 6, 7> jacobianDot (const Eigen::Matrix<double, 7, 1> & q, const Eigen::Matrix<double, 7, 1> & dq);

	Eigen::Matrix<double, 7, 7> inertia (const Eigen::Matrix<double, 7, 1> & q);

	Eigen::Matrix<double, 7, 7> coriolis (const Eigen::Matrix<double, 7, 1> & q, const Eigen::Matrix<double, 7, 1> & dq);

	Eigen::Matrix<double, 1, 1> kin (const Eigen::Matrix<double, 7, 1> & q, const Eigen::Matrix<double, 7, 1> & dq);

	// set methods
	void set_dh_params(double a5, double d1, double d3, double d5)
	{
		a5_ = a5;
		d1_ = d1;
		d3_ = d3;
		d5_ = d5;
	}

	void set_m(double * m)
	{
		for (size_t i = 0; i < 7; ++i)
		{
			m_[i] = m[i];
		}
	}

	void set_com(double (&com)[7][3])
	{
		for (size_t i = 0; i < 7; ++i)
		{
			for (size_t j = 0; j < 3; ++j)
			{
				com_[i][j] = com[i][j];
			}
		}
	}

	void set_link_inertia(double (&link_inertia)[7][3][3])
	{
		for (size_t i = 0; i < 7; ++i)
		{
			for (size_t j = 0; j < 3; ++j)
			{
				for (size_t k = 0; k < 3; ++k)
				{
					link_inertia_[i][j][k] = link_inertia[i][j][k];
				}
			}
		}
	}

	void set_g(double (&gin)[3])
	{
		for (size_t i = 0; i < 3; ++i)
		{
			g[i] = gin[i];
		}
	}



private:
	double a5_;
  	double d1_;
	double d3_;
	double d5_;
	double m_[7];
	double com_[7][3];
	double link_inertia_[7][3][3];
	double g[3];
};
