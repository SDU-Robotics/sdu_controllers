#pragma once
#include <Eigen/Dense>

// This file has been generated by generate6LinkModelSymengine.py.
// Edit at your own risk.

namespace sdu_controllers::models
{
class URRobot
{
 public:
  enum RobotType
  {
    UR3e,
    UR5e
  };

  explicit URRobot(RobotType type);
  int N;
  std::vector<double> gravity(const Eigen::Matrix<double, 6, 1>& q);

  Eigen::Matrix<double, 6, 6> jacobian(const Eigen::Matrix<double, 6, 1>& q);

  Eigen::Matrix<double, 6, 6> jacobian_dot(const Eigen::Matrix<double, 6, 1>& q, const Eigen::Matrix<double, 6, 1>& dq);

  Eigen::Matrix<double, 6, 6> inertia(const Eigen::Matrix<double, 6, 1>& q);

  Eigen::Matrix<double, 6, 6> coriolis(const Eigen::Matrix<double, 6, 1>& q, const Eigen::Matrix<double, 6, 1>& dq);

  std::vector<double> get_a();

  std::vector<double> get_d();

  std::vector<double> get_alpha();

  std::vector<double> get_m();

  Eigen::Vector3d get_g0();

  Eigen::Matrix<double, Eigen::Dynamic, 3> get_CoM();

  std::vector<Eigen::Matrix3d> get_link_inertia();

 private:
  double a2_;
  double a3_;

  double d1_;
  double d4_;
  double d5_;
  double d6_;

  std::vector<double> a;
  std::vector<double> d;
  std::vector<double> alpha;

  double m_[6];
  double com_[6][3];
  double link_inertia_[6][3][3];
  double g[3];
};
} // namepace sdu_controllers::models 
